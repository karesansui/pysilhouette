#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# This file is part of Pysilhouette.
#
# Copyright (c) 2009-2010 HDE, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

"""
@author: Kei Funagayama <kei.funagayama@hde.co.jp>
"""
from __future__ import print_function

import sys
import os
import os.path
import logging
from optparse import OptionParser

from pysilhouette.prep import readconf
from pysilhouette.db import Database, reload_mappers
from pysilhouette.db.model import JobGroup, Job, JOBGROUP_TYPE
from pysilhouette import __version__

usage = '%prog [options]'

def getopts():
    optp = OptionParser(usage=usage, version=__version__)
    optp.add_option('-c', '--config', dest='config', help='configuration file')
    optp.add_option('-a', '--action', dest='action', action="store", type='string',
                    help='action command')
    optp.add_option('-t', '--type', dest='type', action="store", type='string',
                    help='Run type. "serial" or "parallel"')
    optp.add_option('-m', '--name', dest='name', action="store", type='string',
                    help='action name')
    optp.add_option('-r', '--rollback', dest='rollback', action="store", type='string',
                    help='rollback command')
    optp.add_option('-f', '--finish', dest='finish', action="store", type='string',
                    help='finish command')
    optp.add_option('-n', '--number', dest='number', action="store", type='int',
                    help='Test: Number of repeat job', default=1)

    return optp.parse_args()

def chkopts(opts):
    if opts.config is None:
        print('-c or --config option is required.', file=sys.stderr)
        return True

    if os.path.isfile(opts.config) is False:
        print('-c or --config file is specified in the option does not exist.', file=sys.stderr)
        return True

    if opts.name is None:
        print('-m or --name option is required.', file=sys.stderr)
        return True

    if opts.action is None:
        print('-a or --action option is required.', file=sys.stderr)
        return True

    if opts.type is None:
        print('-t or --type option is required.', file=sys.stderr)
        return True

    return False

def main():
    (opts, args) = getopts()
    if chkopts(opts) is True:
        return 1
    
    try:
        opts.config = os.path.abspath(opts.config)
    except AttributeError as e:
        print('No configuration file path.', file=sys.stderr)
        return 1
    
    cf = readconf(opts.config)
    if cf is None:
        print('Failed to load the config file.', file=sys.stderr)
        return 1
    
    try:
        db = Database(cf['database.url'],
                      encoding="utf-8",
                      convert_unicode=True,
                      #assert_unicode='warn', # DEBUG
                      #echo = opts.verbose,
                      #echo_pool = opts.verbose,
                      echo=True, # TODO
                      echo_pool=True # TODO
                      )

        reload_mappers(db.get_metadata())
        session = db.get_session()
        
    except Exception as e:
        print('Initializing a database error', file=sys.stderr)
        raise
    
    try:
        jgs = []
        for i in range(opts.number):
            jg_name = '%s-%d' % (opts.name, i)
            jg_ukey = str(cf['env.uniqkey']) 
            jg = JobGroup(jg_name, jg_ukey)
            if not opts.finish is None:
                jg.finish_command = str(opts.finish)
            if opts.type == 'serial':
                jg.type = JOBGROUP_TYPE['SERIAL']
            elif opts.type == 'parallel':
                jg.type = JOBGROUP_TYPE['PARALLEL']
            else:
                jg.type = JOBGROUP_TYPE['SERIAL']

            j_name = '%s-%d' % (opts.name, i)
            j_order = i
            j = Job(j_name, j_order, str(opts.action))
            if not opts.rollback is None:
                j.rollback_command = str(opts.rollback)

            jg.jobs.append(j)
            jgs.append(jg)
            
        session.add_all(jgs)
        session.commit()
        session.close()
        print('Insert JobGroup and Job. num=%d [OK]' % opts.number, file=sys.stdout)
    except Exception as e:
        print('Failed to add JobGroup and Job.', file=sys.stderr)
        raise
            
if __name__ == '__main__':
    sys.exit(main())
