#!/bin/sh
#
# Example init.d script with LSB support.
#
# Please read this init.d carefully and modify the sections to
# adjust it to the program you want to run.
#
# Copyright (c) 2007 Javier Fernandez-Sanguino <jfs@debian.org>
#
# This is free software; you may redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2,
# or (at your option) any later version.
#
# This is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License with
# the Debian operating system, in /usr/share/common-licenses/GPL;  if
# not, write to the Free Software Foundation, Inc., 59 Temple Place,
# Suite 330, Boston, MA 02111-1307 USA
#
### BEGIN INIT INFO
# Provides:          pysilhouette
# Required-Start:    $network $local_fs
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: A python-based background job manager
# Description:       Pysilhouette is a python-based background job manager,
#                    intended to co-work with various python-based web applications.
#                    It makes it available to get job status to programmers,
#                    which was difficult in http-based stateless/interactive session before.
#                    100% Pure Python.
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

DAEMON_NAME="pysilhouette"
NAME="pysilhouette"           # Introduce the short server's name here
DAEMON=/usr/bin/$NAME         # Introduce the server's location here
DESC="Background job manager" # Introduce a short description here
LOGDIR=/var/log/pysilhouette  # Log directory to use
RUNDIR="/var/run"
PIDFILE="${RUNDIR}/${DAEMON_NAME}.pid"

. /lib/lsb/init-functions

# Default options, these can be overriden by the information
# at /etc/default/$NAME
CONF="/etc/pysilhouette/silhouette.conf"
EXTRA_ARGS=""

# Additional options given to the server
DAEMON_OPTS="-p ${PIDFILE} -c ${CONF} ${EXTRA_ARGS}"

DIETIME=2               # Time to wait for the server to die, in seconds
                        # If this value is set too low you might not
                        # let some servers to die gracefully and
                        # 'restart' will not work

STARTTIME=2             # Time to wait for the server to start, in seconds
                        # If this value is set each time the server is
                        # started (on start or restart) the script will
                        # stall to try to determine if it is running
                        # If it is not set and the server takes time
                        # to setup a pid file the log message might
                        # be a false positive (says it did not start
                        # when it actually did)

LOGFILE=$LOGDIR/$NAME.log # Server logfile
DAEMONUSER=pysilhouette   # Users to run the daemons as. If this value
                          # is set start-stop-daemon will chuid the server

# For SELinux we need to use 'runuser' not 'su'
if [ -x /sbin/runuser ]; then
    SU=runuser
else
    SU=su
fi

# Include defaults if available
if [ -f /etc/default/$NAME ] ; then
    . /etc/default/$NAME
fi

if [ -f /etc/default/${DAEMON_NAME} ] ; then
    . /etc/default/${DAEMON_NAME}
fi

# ENV PYTHONPATH
if [ "x" != "x${PYTHON_SEARCH_PATH}" ]; then
    export PYTHONPATH=${PYTHON_SEARCH_PATH}:${PYTHONPATH}
fi

# Daemon mode.
if [ "x${DAEMON_MODE}" = "xyes" ]; then
    DAEMON_OPTS=${DAEMON_OPTS}" -d"
fi

# Debug mode.
if [ "x${DEBUG}" = "xyes" ]; then
    DAEMON_OPTS=${DAEMON_OPTS}" -v"
fi

# Use this if you want the user to explicitly set 'RUN' in
# /etc/default/
if [ "x$RUN" != "xyes" ] ; then
    log_failure_msg "$NAME disabled, please adjust the configuration to your needs "
    log_failure_msg "and then set RUN to 'yes' in /etc/default/$NAME to enable it."
    exit 0
fi

# Check that the user exists (if we set a user)
# Does the user exist?
if [ -n "$DAEMONUSER" ] ; then
    if getent passwd | grep -q "^$DAEMONUSER:"; then
        # Obtain the uid and gid
        DAEMONUID=`getent passwd |grep "^$DAEMONUSER:" | awk -F : '{print $3}'`
        DAEMONGID=`getent passwd |grep "^$DAEMONUSER:" | awk -F : '{print $4}'`
    else
        log_failure_msg "The user $DAEMONUSER, required to run $NAME does not exist."
        exit 1
    fi
fi

#set -e

running_pid() {
# Check if a given process pid's cmdline matches a given name
    pid=$1
    name=$2
    [ -z "$pid" ] && return 1
    [ ! -d /proc/$pid ] &&  return 1
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n" |sed -n 2p|cut -d : -f 1`
    # Is this the expected server
    [ "$cmd" != "$name" ] &&  return 1
    return 0
}

running() {
# Check if the process is running looking at /proc
# (works for all users)

    # No pidfile, probably no daemon present
    [ ! -f "$PIDFILE" ] && return 1
    pid=`cat $PIDFILE`
    running_pid $pid $DAEMON || return 1
    return 0
}

start_server() {
    if [ -e $PIDFILE ]; then
            log_progress_msg "already running..."
            return 1
    fi
    touch $PIDFILE
    chown $DAEMONUSER:${DAEMONUSER} $PIDFILE $SCHEDULER_PIDFILE $PERFORMER_PIDFILE
    $PYTHON ${PREFIX}${DAEMON} $DAEMON_OPTS

    RETVAL=$?
    if [ ${RETVAL} -ne 0 ]; then
        stop_server
    fi
    return ${RETVAL}
}

stop_child() {
    if [ -z "$1" ]; then
        return 0;
    fi
    if [ -f "$RUNDIR/$1.pid" ]; then
        PID=$(cat "$RUNDIR/$1.pid")
        kill -15 "$PID" > /dev/null 2>&1
        sleep 1
        kill -9  "$PID" > /dev/null 2>&1
        rm -f "$RUNDIR/$1.pid"
    fi
}


stop_childs() {
    stop_child schedulerd
    stop_child asynschedulerd
    stop_child performerd
    stop_child asynperformerd
}

silhouetted_stop() {
    if [ ! -e $PIDFILE ]; then
        log_progress_msg "not running..."
        return 1
    fi
    PID=`cat $PIDFILE`
    if [ -z "$PID" ]; then
        log_progress_msg "not running... - not pid"
        rm -f $PIDFILE
        return 1
    fi
    killproc -p $PIDFILE $DAEMON
    RETVAL=$?
    return $RETVAL
}

stop_server() {
    silhouetted_stop
    RETVAL=$?
    if [ ${RETVAL} -eq 0 ]; then
        rm -f ${PIDFILE}
    fi
    stop_childs
    return $RETVAL
}

force_stop() {
# Force the process to die killing it manually
    [ ! -e "$PIDFILE" ] && return
    if running ; then
        kill -15 $pid
        # Is it really dead?
        sleep "$DIETIME"s
        if running ; then
            kill -9 $pid
            sleep "$DIETIME"s
            if running ; then
                log_progress_msg "Cannot kill $NAME (pid=$pid)!"
                exit 1
            fi
        fi
    fi
    rm -f $PIDFILE

    eval "$SCHEDULER_INIT_D force_stop"
    rm -f $SCHEDULER_PIDFILE

    eval "$PERFORMER_INIT_D force_stop"
    rm -f $PERFORMER_PIDFILE
}


case "$1" in
  start)
        log_daemon_msg "Starting $DESC" "$NAME"
        # Check if it's running first
        if running ;  then
            log_progress_msg "apparently already running"
            log_end_msg 0
            exit 0
        fi
        if start_server ; then
            # NOTE: Some servers might die some time after they start,
            # this code will detect this issue if STARTTIME is set
            # to a reasonable value
            [ -n "$STARTTIME" ] && sleep $STARTTIME # Wait some time 
            if  running ;  then
                # It's ok, the server started and is running
                log_end_msg 0
            else
                # It is not running after we did start
                log_end_msg 1
            fi
        else
            # Either we could not start it
            log_end_msg 1
        fi
        ;;
  stop)
        log_daemon_msg "Stopping $DESC" "$NAME"
        if running ; then
            # Only stop the server if we see it running
            errcode=0
            stop_server || errcode=$?
            log_end_msg $errcode
        else
            # If it's not running don't do anything
            log_progress_msg "apparently not running"
            log_end_msg 0
            exit 0
        fi
        ;;
  force-stop)
        # First try to stop gracefully the program
        $0 stop
        if running; then
            # If it's still running try to kill it more forcefully
            log_daemon_msg "Stopping (force) $DESC" "$NAME"
            errcode=0
            force_stop || errcode=$?
            log_end_msg $errcode
        fi
        ;;
  restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"
        errcode=0
        stop_server || errcode=$?
        # Wait some sensible amount, some server need this
        [ -n "$DIETIME" ] && sleep $DIETIME
        start_server || errcode=$?
        [ -n "$STARTTIME" ] && sleep $STARTTIME
        running || errcode=$?
        log_end_msg $errcode
        ;;
  status)

        log_daemon_msg "Checking status of $DESC" "$NAME"
        if running ;  then
            log_progress_msg "running"
            log_end_msg 0
        else
            log_progress_msg "apparently not running"
            log_end_msg 1
            exit 1
        fi
        ;;
  # Use this if the daemon cannot reload
  reload)
        log_warning_msg "Reloading $NAME daemon: not implemented, as the daemon"
        log_warning_msg "cannot re-read the config file (use restart)."
        ;;
  *)
        echo "Usage: $0 {start|stop|force-stop|restart|force-reload|status}" >&2
        exit 1
        ;;
esac

exit 0
